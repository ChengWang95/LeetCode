//动态规划
//    用dp[n]表示以第n个数结尾的最大连续子序列的和，于是存在以下递推公式：
//      dp[n] = dp[n-1]>0?(dp[n-i]+nums[n]):nums[n]
//    则整个问题的答案是max(dp[m]) | m∈[1, N]

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        int dp = nums[0];       //dp[n]表示以第n个数结尾的最大连续子序列的和
        int max = nums[0];
        for (int i=1;i<nums.size();++i){
            dp = nums[i] + (dp>0? dp:0 );
            max = max>dp? max:dp;
        }
        return max;
    }  
};
