Approach1:递归-传应用

合并当前树=合并当前值+合并左子树+合并右子树
需要注意的是，当前左子树为null时，直接把右子树复制过去，这样的话需要传应用，才能修改。
所以要把递归程序改为传引用。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        mergyT(t1,t2);
        return t1;
    }
    void mergyT(TreeNode* &t1, TreeNode* &t2){
        if(t1 && t2) {
            t1->val = t1->val + t2->val;
            mergyT(t1->left, t2->left);
            mergyT(t1->right, t2->right);
        }
        else if(t2) {
            t1 = t2;
        }
    }
};


Approach2：递归，返回节点
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* t1, TreeNode* t2) {
        if(t1==NULL) return t2;
        if(t2 == NULL) return t1;
        t1->val += t2->val;
        t1->left = mergeTrees(t1->left, t2->left);
        t1->right = mergeTrees(t1->right, t2->right);
        return t1;
    }
};
