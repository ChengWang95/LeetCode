//通过计算两链表长度，得到长度之差diif；
//让较长的链表的指针先走diff，就能保证它们同时结束。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (!(headA && headB)) return NULL;
        auto a = headA;
        auto b = headB;
        int i = 0, j = 0;
        while(a) {
            ++i;
            a = a->next;
        }   
        while(b) {
            ++j;
            b = b->next;
        } 
        auto longer=i>j? headA:headB;
        auto shorter=i>j? headB:headA;
        int diff = i>j? (i-j):(j-i);
        while(diff-->0) longer = longer->next;
        while(longer){                                  //这里还能优化，因为同时结束，当longer==NULL时，shorter也为NULL，直接返回longer即可。
            if(longer == shorter) return longer;
            longer = longer->next;
            shorter = shorter->next;
        }
        return NULL;
    }
};
