//不用计算两个链表的长度
//令a = headA，b = headB，当a遍历链表A、B到达的点和b遍历B、A到达的点是相同点；
//所以，通过让a走完A后，转移到B的dead，b走完B后，转移到A的head，这样能保证他们最后相遇。这样，如相交，则相交的点 a=b。
//此外，还有一点需要注意，若没有相交，是否会一直循环下去。
//不会，因为遍历完A、B后，a=b=nullptr，此时不满足循环条件。同时，也不同特别说明不想交的特例。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (!(headA && headB)) return NULL;
        auto a = headA;
        auto b = headB;
        while (a!=b){
            a = a==nullptr? headB:a->next;    //只有走完一次后，才会交换，第二次走完，两者同时为nullptr，返回空值。
            b = b==nullptr? headA:b->next;
        }
        return a;
    }
};
