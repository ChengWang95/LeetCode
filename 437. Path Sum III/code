Approach1：递归：
写递归的技巧是：明白一个函数的作用并相信它能完成这个任务，千万不要跳进这个函数里面企图探究更多细节，否则就会陷入无穷的细节无法自拔。你就算浑身是铁，能压几个栈？

按照前面说的技巧，先来定义清楚每个递归函数应该做的事：
pathSum 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，和为目标值的路径总数。
count 函数：给他一个节点和一个目标值，他返回以这个节点为根的树中，能凑出几个以该节点为路径开头，和为目标值的路径总数。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        if(root==NULL) return 0;
        int leftPathSum = pathSum(root->left, sum); // 左边路径总数（相信他能算出来）
        int rightPathSum = pathSum(root->right, sum); // 右边路径总数（相信他能算出来）
        int pathSumFromThisNode = count(root, sum); // 自己为开头的路径数
        return leftPathSum + rightPathSum + pathSumFromThisNode;
    }
    int count(TreeNode* root, int sum){
        if(root==NULL) return 0;
        int isMe = (root->val==sum? 1:0); // 我自己能不能独当一面，作为一条单独的路径呢？
        int leftCount = count(root->left, sum - root->val);// 左边的小老弟，你那边能凑几个 sum - node.val 呀？
        int rightCount = count(root->right, sum-root->val);// 右边的小老弟，你那边能凑几个 sum - node.val 呀？
        return isMe + leftCount + rightCount;// 我这能凑这么多个
    }
};
