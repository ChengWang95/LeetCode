首先确定一点：主元素存在的话，仅可能有一个。

Approach1:
  hashtable:常数时间搜索

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> Map;
        for (int num:nums ){
            if(Map.count(num))
                Map[num]++;
            else
                Map[num] = 1;
            if (Map[num] > nums.size()/2) return num;
        }
        return 0;
    }
};


Approach2：
  排序：主元素超过一半，那排序后会出现在n/2 n/2+1的位置
  
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums[nums.size()/2];
    }
};


Approch3:
  摩尔投票算法/Boyer-Moore Majority Vote Algorithm
  摩尔投票算法是基于这个事实：每次从序列里选择两个不相同的数字删除掉（或称为“抵消”），最后剩下一个数字或几个相同的数字，就是出现次数大于总数一半的那个.
  
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count = 1;
        int major = nums[0];
        for (int num:nums){
            if (major == num)
                count++;
            else if (count)
                count--;
            else{
                count = 1;
                major = num;
            }
